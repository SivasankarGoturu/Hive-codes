


sqoop export \
-Dhadoop.security.credential.provider.path=jceks://hdfs/user/cloudera/mysql.password.jceks \
--connect jdbc:mysql://localhost:3306/assigniment \
--username root \
--password-alias mysql.cloudera.password \
--table covid19india \
--staging-table covid19india_staging \
--clear-staging-table \
--export-dir '/user/cloudera/datasets/Covid19_india.csv' \
--fields-terminated-by ','

sqoop export \
-Dhadoop.security.credential.provider.path=jceks://hdfs/user/cloudera/mysql.password.jceks \
--connect jdbc:mysql://localhost:3306/assigniment \
--username root \
--password-alias mysql.cloudera.password \
--table statewisetesting \
--staging-table statewisetesting_staging \
--clear-staging-table \
--export-dir '/user/cloudera/datasets/StatewiseTestingDetails.csv' \
--fields-terminated-by ','

hadoop fs -mkdir /user/cloudera/datasets2

sqoop job \
-Dhadoop.security.credential.provider.path=jceks://hdfs/user/cloudera/mysql.password.jceks \
--create job_covid19_india \
-- import \
--connect jdbc:mysql://localhost:3306/assigniment \
--username root \
--password-alias mysql.cloudera.password \
--table covid19india \
--warehouse-dir '/user/cloudera/datasets2' \
--check-column Sno \
--incremental append \
--last-value 0

sqoop job \
-Dhadoop.security.credential.provider.path=jceks://hdfs/user/cloudera/mysql.password.jceks \
--create job_statewisetesting_india \
-- import \
--connect jdbc:mysql://localhost:3306/assigniment \
--username root \
--password-alias mysql.cloudera.password \
--table statewisetesting \
--warehouse-dir '/user/cloudera/datasets2' \
--check-column Seq \
--incremental append \
--last-value 0

sqoop job --exec job_statewisetesting_india

sqoop create-hive-table \
--connect jdbc:mysql://localhost:3306/assigniment \
--username root \
--password cloudera \
--table covid19india \
--hive-table covid19india


create external table covid_india (
Sno int,
Date string, 
State string, 
Cured int, 
Deaths int, 
Confirmed int)
row format delimited
fields terminated by ','
location '/user/cloudera/datasets2/covid19india/'


create table state_testing (
Seq int, 
Date string, 
State string, 
Total_Samples int, 
Negative int, 
Positive int
)
row format delimited
fields terminated by ','
location '/user/cloudera/datasets2/statewisetesting'

hadoop fs -mkdir datasets3
hadoop fs -mkdir datasets3/covid_india_partition
hadoop fs -mkdir datasets3/statewise_partition



set hive.exec.dynamic.partition=true;
set hive.exec.dynamic.partition.mode=nonstrict;
set hive.enforce.bucketing=true;



create external table covid_india_ORC (
Sno int,
Date date,  
Cured int, 
Deaths int, 
Confirmed int)
partitioned by (State string)
clustered by (Date) into 4 buckets
stored as ORC
location '/user/cloudera/datasets3/covid_india_partition/'
tblproperties('orc.compress'='SNAPPY');

create external table state_testing_ORC (
Seq int,
Date date, 
Total_Samples int, 
Negative int, 
Positive int
)
partitioned by (State string)
clustered by (Date) into 4 buckets
stored as ORC
location '/user/cloudera/datasets3/statewise_partition'
tblproperties('orc.compress'='SNAPPY');




insert overwrite table covid_india_ORC
partition (State)
select Sno,from_unixtime(unix_timestamp(Date,'dd/M/yyyy'),'yyyy-MM-dd') date, Cured, Deaths, Confirmed, State from covid_india;


insert overwrite table state_testing_ORC
partition (State)
select Seq ,from_unixtime(unix_timestamp(Date,'M/dd/yyyy'),'yyyy-MM-dd') date , Total_Samples, Negative , Positive, State from state_testing;



select c.State,c.Date,s.Total_Samples, s.negative, s.positive, c.cured, c.deaths, c.confirmed from covid_india_orc c
join state_testing_orc s on s.Date = c.Date and s.State = c.State



create table covid_details as 
select c.State,c.Date,s.Total_Samples, s.negative, s.positive, c.cured, c.deaths, c.confirmed from covid_india_orc c
join state_testing_orc s on s.Date = c.Date and s.State = c.State;

Finding minimum and maximum consistency consistency 

select state,min(positive-confirmed) MostConsistency from covid_details
group by state;

select * from covid_details
where state = 'Andaman and Nicobar Islands';

select state,max(positive-confirmed) LeastConsistency from covid_details
group by state;


select a.state,a.ConsistentData from 
(select state,(positive-confirmed) ConsistentData,DENSE_RANK() over(positive-confirmed ASC) cons from covid_details) a
where a.cons =1;

select state,(positive-confirmed) ConsistentData,DENSE_RANK() over(state desc) cons from covid_details;

Sno int,
Date date,  
Cured int, 
Deaths int, 
Confirmed int


CREATE TABLE hbase_covid_details (Sno int, Date date,cured int,Deaths int, confirmed int,State string) STORED BY
'org.apache.hadoop.hive.hbase.HBaseStorageHandler' WITH
SERDEPROPERTIES ("hbase.columns.mapping"=":key,cf1:Sno,cf1:Date,cf1:cured,cf1:Deaths,cf1:confirmed,cf1:State")
TBLPROPERTIES ("hbase.table.name"="covid_data");




CREATE TABLE cov(rkey string, state string, Date date, total_samples int, negative int, positive int, cured int, deaths int, confirmed int)
STORED BY 'org.apache.hadoop.hive.hbase.HBaseStorageHandler' WITH
SERDEPROPERTIES ("hbase.columns.mapping"=":key, testing: state, testing: date, testing: total_samples, testing: negative, testing: positive,
covidcases: cured,covidcases: deaths,covidcases: confirmed")TBLPROPERTIES("hbase.table.name"="cov_hbase");

insert overwrite table cov select concat(state,'',date) rkey,state, date, total_samples, negative, positive, cured, deaths, confirmed
 from covid_details;





-----------+------------+-----------+--------------------+---------------+---------------+------------+-------------+----------------+--+
| cov.rkey  | cov.state  | cov.date  | cov.total_samples  | cov.negative  | cov.positive  | cov.cured  | cov.deaths  | cov.confirmed  |
+-----------+------------+-----------+--------------------+---------------+---------------+------------+-------------+----------------+--+
+-----------+------------+-----------+--------------------+---------------+---------------+------------+-------------+----------------+--+
No rows selected (1.496 seconds)
0: jdbc:hive2://> describe covid_details;
OK
+----------------+------------+----------+--+
|    col_name    | data_type  | comment  |
+----------------+------------+----------+--+
| state          | string     |          |
| date           | date       |          |
| total_samples  | int        |          |
| negative       | int        |          |
| positive       | int        |          |
| cured          | int        |          |
| deaths         | int        |          |
| confirmed      | int        |          |
+----------------+------------+----------+--+

